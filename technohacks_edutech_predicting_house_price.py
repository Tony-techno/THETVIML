# -*- coding: utf-8 -*-
"""TechnoHacks_EduTech_predicting_house_price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMdsronxxKn2OcLriszYHuRM042wlDh7

#**Predicting House Price**

#1. **Importing Libraries**

###1. numpy: A library for efficient numerical computation.
###2. pandas: A library for data manipulation and analysis.
###3. seaborn: A visualization library based on matplotlib.
###4. matplotlib.pyplot: A plotting library.
###5. MinMaxScaler: A scaler that scales features to a common range.
###6. train_test_split: A function to split data into training and testing sets.
###7. LinearRegression: A linear regression model.
###8. mean_squared_error: A function to calculate the mean squared error.
###9. r2_score: A function to calculate the R-squared score.
###10. mean_absolute_error: A function to calculate the mean absolute error.
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

"""#2. **Data Loading and Preprocessing**

###1. Loading Boston Housing Data: Loads the Boston housing dataset from a CSV file.
"""

df = pd.read_csv('/content/boston.csv')

"""###2. Data Shape: Displays the shape of the loaded data."""

df.shape

"""###3. Data Information: Displays information about the data, including data types and missing values."""

df.info()

"""###4. Data Head and Tail: Displays the first and last few rows of the data."""

df.head()

df.tail()

"""###5. Data Null Values: Checks for null values in the data."""

df.isnull()

"""###6. Data Null Values Sum: Calculates the total number of null values in the data."""

df.isnull().sum()

df.isnull().sum().sum()

"""###7. Data Description: Displays summary statistics for the data."""

df.describe()

df.describe().transpose()

"""###8. Data Scaling: Scales the data using Min-Max Scaler."""

scalar = MinMaxScaler()
scalar.fit(df)

DataScaled = scalar.fit_transform(df)
DataScaled = pd.DataFrame(DataScaled, columns=df.columns)

"""###9. Data Scaling Description: Displays summary statistics for the scaled data."""

DataScaled.describe()

DataScaled.describe().transpose()

"""#3. **Data Visualization**

###1. Box Plot: Creates a box plot for the scaled data.
"""

boxplot = DataScaled.boxplot()
plt.show()

"""###2. Correlation Matrix: Displays the correlation matrix for the data."""

cordata = DataScaled.corr(method="pearson")
with pd.option_context("display.max_rows", None, "display.max_column", cordata.shape[1]):
  print(cordata)

# Visualize correlations
cordata = DataScaled.corr(method="pearson")
plt.matshow(cordata)
plt.xticks(range(len(cordata.columns)), cordata.columns, rotation=90)
plt.yticks(range(len(cordata.columns)), cordata.columns)
plt.colorbar()
plt.show()

"""###3. Heatmap: Creates a heatmap for the correlation matrix."""

# Generate a heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.show()

"""###4. Distribution Plot: Creates a distribution plot for the median value of homes."""

sns.displot(df['MEDV'], bins=30)
plt.title('Distribution of MEDV')
plt.show()

"""###5. Scatter Plot: Creates a scatter plot for the average number of rooms per dwelling and the median value of homes."""

plt.figure(figsize=(10, 6))
plt.scatter(df['RM'], df['MEDV'])
plt.xlabel('Average Number of Rooms per Dwelling (RM)')
plt.ylabel('Median Value of Homes (MEDV)')
plt.title('RM vs MEDV')
plt.show()

"""#4. Model Training and Evaluation"""

X = df.drop('MEDV', axis = 1)
print("X Shape= ", X.shape)
Y = df['MEDV']
print('Y shape= ', Y.shape)

"""###1. Splitting Data: Splits the data into training and testing sets."""

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
print("X train Shape", X_train.shape)
print("X test Shape", X_test.shape)
print("Y train Shape", y_train.shape)
print("Y test Shape", y_test.shape)

"""##2. Training Model: Trains a linear regression model on the training data."""

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

"""###3. Making Predictions: Makes predictions on the testing data."""

# Make predictions
y_pred = model.predict(X_test)

"""###4. Model Evaluation Metrics: Calculates the mean squared error, R-squared score, and mean absolute error for the model."""

# Calculate Mean Squared Error
mse = mean_squared_error(y_test, y_pred)

# Calculate R-squared
r2 = r2_score(y_test, y_pred)

# Calculate Mean Absolute Error
mae = mean_absolute_error(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')
print(f'Mean Absolute Error: {mae}')

"""#5. Predicting House Prices

###1. Function to Predict House Price: Defines a function to predict the house price given input features.
"""

# Function to predict house price given input features
def predict_house_price(features):
    # Convert input features to DataFrame
    features_df = pd.DataFrame([features], columns=X.columns)

    # Predict the price using the trained model
    predicted_price = model.predict(features_df)[0]
    return predicted_price

"""###2. Example Usage: Uses the function to predict the house price for a set of example features."""

# Example usage of the function
example_features = {
    'CRIM': 0.1,
    'ZN': 18.0,
    'INDUS': 2.31,
    'CHAS': 0,
    'NOX': 0.538,
    'RM': 6.575,
    'AGE': 65.2,
    'DIS': 4.09,
    'RAD': 1,
    'TAX': 296,
    'PTRATIO': 15.3,
    'B': 396.9,
    'LSTAT': 4.98
}

predicted_price = predict_house_price(example_features)
print("\n" + "="*70)
print("          Predicted House Price")
print("="*70)
print(f"The predicted price for the house with the given features is: ${predicted_price:,.2f}")
print("="*70 + "\n")

"""###3. Multiple Examples: Predicts house prices for multiple sets of features.
###4. Saving Results: Saves the predicted house prices to a CSV file.
"""

# Create multiple examples of house features
example_features_list = [
    {'CRIM': 0.1, 'ZN': 18.0, 'INDUS': 2.31, 'CHAS': 0, 'NOX': 0.538, 'RM': 6.575, 'AGE': 65.2, 'DIS': 4.09, 'RAD': 1, 'TAX': 296, 'PTRATIO': 15.3, 'B': 396.9, 'LSTAT': 4.98},
    {'CRIM': 0.2, 'ZN': 0.0, 'INDUS': 7.07, 'CHAS': 0, 'NOX': 0.469, 'RM': 6.421, 'AGE': 78.9, 'DIS': 4.9671, 'RAD': 2, 'TAX': 242, 'PTRATIO': 17.8, 'B': 396.9, 'LSTAT': 9.14},
    {'CRIM': 0.3, 'ZN': 0.0, 'INDUS': 7.87, 'CHAS': 0, 'NOX': 0.524, 'RM': 6.998, 'AGE': 45.8, 'DIS': 6.0622, 'RAD': 3, 'TAX': 222, 'PTRATIO': 18.7, 'B': 394.63, 'LSTAT': 2.94},
    {'CRIM': 0.4, 'ZN': 0.0, 'INDUS': 8.14, 'CHAS': 0, 'NOX': 0.538, 'RM': 7.147, 'AGE': 54.2, 'DIS': 6.0622, 'RAD': 4, 'TAX': 307, 'PTRATIO': 21.0, 'B': 380.02, 'LSTAT': 5.33},
    {'CRIM': 0.5, 'ZN': 0.0, 'INDUS': 5.96, 'CHAS': 0, 'NOX': 0.499, 'RM': 5.933, 'AGE': 68.2, 'DIS': 3.0913, 'RAD': 5, 'TAX': 279, 'PTRATIO': 19.2, 'B': 396.9, 'LSTAT': 7.67}
]

# Predict prices for each set of features
results = []
for features in example_features_list:
    predicted_price = predict_house_price(features)
    features['Predicted_Price'] = predicted_price
    results.append(features)

# Create a DataFrame from the results
results_df = pd.DataFrame(results)

# Save the DataFrame to a CSV file
results_df.to_csv('predicted_house_prices.csv', index=False)

print(results_df)

"""#6. Output

###Predicted House Prices: Displays the predicted house prices for the multiple sets of features.

#7. Summary

###This code demonstrates a linear regression model to predict house prices based on various features. It loads the Boston housing dataset, preprocesses the data, visualizes the relationships between features, trains a linear regression model, and evaluates its performance. The model is then used to predict house prices for multiple sets of features.
"""